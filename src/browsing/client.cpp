#include <unistd.h>
#include <iostream>
#include <thread>
#include <iomanip>
#include <map>

#include <server.h>
#include <gamespy.h>
#include <globals.h>
#include <util.h>

#include <browsing/client.h>

typedef void (Browsing::Client::*RequestActionFunc)(const GameSpy::Parameter&);

static std::map<std::string, RequestActionFunc> mRequestActions = 
{
	{ "serverlist",   &Browsing::Client::requestServerList   },
};

Browsing::Client::Client(int socket, struct sockaddr_in address)
{
	this->_socket = socket;
	this->_address = address;
}

Browsing::Client::~Client()
{
	this->Disconnect();
}

void Browsing::Client::Listen()
{
	while(true)
	{
		std::string request;
		std::vector<char> buffer(4096, 0);
		
		int v = read(this->_socket, &(buffer[0]), 4096);
		
		// If error or no data is recieved we end the connection
		if(v <= 0)
		{
			break;
		}
		
		// Resize buffer
		buffer.resize(v);
		
		request = Util::Buffer2String(buffer);
		
		this->_LogTransaction("-->", request);
		
		this->onRequest(request);
	}
	
	this->Disconnect();
}

void Browsing::Client::Disconnect()
{
	close(this->_socket);
	g_browsing_server->onClientDisconnect(*this);
}

void Browsing::Client::Send(const std::string &msg) const
{
	send(this->_socket, msg.c_str(), msg.size(), 0);
}

void Browsing::Client::Send(const std::vector<unsigned char> &msg) const
{
	send(this->_socket, &(msg[0]), msg.size(), 0);
}

/*
	Events
*/
void Browsing::Client::onRequest(const std::string &request)
{
	GameSpy::Parameter parameter = GameSpy::Request2Parameter(request);
	
	// Find function name
	//std::string action = parameter[0];
	std::string action = "serverlist";
	
	if (mRequestActions.find(action) != mRequestActions.end())
	{
		// Get Function address
		RequestActionFunc func = mRequestActions[action];
	
		// Execute action function with class object.
		(this->*(func))(parameter);
	}
	else
	{
		std::unique_lock<std::mutex> guard(g_mutex_io);
		
		std::cout << "action \"" << action << "\"not implemented!" << std::endl;
		
		guard.unlock();
		
		this->Disconnect();
	}
}

/*
	
*/
void Browsing::Client::requestServerList(const GameSpy::Parameter& parameter)
{
	std::vector<unsigned char> data = {
		0xe6, 0x21, 0x12, 0x22, 0xc7, 0xbe, 0xbc, 0x2f, 0xa9, 0x35, 0x12, 0xf3, 0x7c, 0x80, 0xe9, 0xd2,
		0xba, 0x93, 0x69, 0x98, 0xe8, 0xac, 0x91, 0xa9, 0xf9, 0xc4, 0x37, 0xf4, 0x08, 0x18, 0x1c, 0x8a,
		0xa5, 0x3e, 0x1c, 0xc7, 0x05, 0xcd, 0x58, 0x78, 0x25, 0x4c, 0xba, 0xba, 0x8a, 0x97, 0x35, 0x7b,
		0xd0, 0xcc, 0x3a, 0xac, 0xd0, 0x2f, 0x1f, 0x13, 0xa3, 0x8e, 0x1c, 0xac, 0xa5, 0x89, 0x34, 0xc0,
		0x9e, 0x7d, 0x90, 0xe2, 0x08, 0x8f, 0x6c, 0x1b, 0xf8, 0xc3, 0xb7, 0x64, 0x4b, 0xfd, 0x66, 0x7b,
		0x24, 0xff, 0x35, 0xea, 0xcb, 0xcc, 0x82, 0x33, 0xc4, 0x35, 0xa6, 0xc2, 0xa4, 0x6a, 0x75, 0x03,
		0x8e, 0x33, 0x97, 0x2c, 0xac, 0x39, 0xea, 0x0a, 0x66, 0x55, 0xf5, 0x6f, 0x7a, 0x84, 0x4f, 0x15,
		0x92, 0xc9, 0xb5, 0x65, 0x3a, 0x74, 0xf8, 0x61, 0x88, 0x9c, 0x53, 0x7c, 0x89, 0xfa, 0x8a, 0x46,
		0x57, 0x9a, 0x83, 0xd8, 0x3b, 0x7c, 0x70, 0xdc, 0x70, 0xf1, 0xa2, 0xd0, 0x76, 0xa4, 0x3a, 0x0f,
		0x87, 0xc7, 0x1b, 0x84, 0xf0, 0x26, 0xfa, 0x31, 0x77, 0xa2, 0x3f, 0xb8, 0x55, 0x8c, 0x6b, 0xcb,
		0x39, 0xbd, 0x0e, 0x2d, 0x4b, 0xbf, 0xa5, 0x76, 0xb3, 0x48,	0x33, 0xa8, 0x99, 0x20, 0xb8, 0x6f,
		0x37, 0xde, 0xf1, 0x17, 0xd6, 0xd1, 0x8f, 0x72, 0xa4, 0x29, 0x1b, 0x17, 0xe4, 0x0c, 0x8b, 0x77,
		0xda, 0x88, 0x4d, 0x7a, 0x4a, 0xf1, 0x65, 0x7a, 0xa1, 0x49, 0x5c, 0xd7,	0x15, 0xcc, 0x4c, 0x1c,
		0x98, 0x79, 0x46, 0x54, 0xef, 0xdd, 0xe3, 0xcd, 0xfc, 0xed, 0x4d, 0x1f, 0x51, 0x32, 0xf7, 0xf7,
		0x60, 0xc8, 0xd4, 0x6a, 0xcd, 0xd1, 0x9c, 0x8e, 0x84, 0xba, 0x6a, 0x05, 0xc9, 0x35,	0xa2, 0x24,
		0x13, 0x1c, 0xe7, 0xae, 0x91, 0x63, 0xd1, 0x7b, 0x71, 0x1e, 0xcf, 0xb1, 0x58, 0x70, 0xaf, 0xd0,
		0x8f, 0x6a, 0x00, 0x61, 0x34, 0x4a, 0x1d, 0xaa, 0x03, 0xe3, 0x1e, 0xc6, 0x5e, 0xfc, 0xcd
	};
	
	/*
	std::vector<unsigned char> data2 = {
		0xe6, 0x21, 0x12, 0x22, 0xc7, 0xbe, 0xbc, 0x2f, 0xa9, 0x35, 0x12, 0xf3, 0x7c, 0x80, 0xe9, 0xd2,
		0xba, 0x93, 0x69, 0x98, 0xe8, 0xac, 0x91, 0xa9, 0xf9, 0xc4, 0x37, 0xf4, 0x08, 0x18, 0x1c, 0x8a,
		0xa5, 0x3e, 0x1c, 0xc7, 0x05, 0x77, 0x42, 0x41, 0x5c, 0x7e, 0x87, 0xd9, 0xe6, 0x26, 0x6e, 0x3e,
		0x49, 0xea, 0x43, 0x3a, 0xfb, 0x18, 0x1d, 0x2c, 0xd4, 0x2c, 0xfb, 0x1e, 0x1e, 0xac, 0x1f, 0x24,
		0x09, 0xad, 0x90, 0x39, 0x41, 0x05, 0x6b, 0x07, 0xd2, 0x6b, 0x0e, 0x0d, 0xa0, 0xf4, 0x15, 0x49,
		0x9b, 0x30, 0xfe, 0x54, 0xa6, 0x99, 0x1e, 0xd7, 0x9e, 0x6b, 0x0b, 0x00, 0xb6, 0x78, 0x56, 0xb6,
		0xcd, 0x94, 0xbf, 0x32, 0x7d, 0x01, 0x5a, 0xcc, 0xcf, 0x1b, 0x11, 0xb3, 0xc1, 0xee, 0x26, 0x5d,
		0xfa, 0x2b, 0x36, 0xb5, 0x34, 0xa0, 0xe7, 0xc6, 0x7b, 0x96, 0x26, 0xe7, 0xca, 0x38, 0x3f, 0x69,
		0xc3, 0x25, 0x6e, 0x9d, 0xc0, 0x5e, 0xe9, 0x4c, 0x0b, 0x1d, 0xfa, 0x77, 0xcb, 0x12, 0x75, 0x19,
		0xa9, 0x81, 0x50, 0x4f, 0x12, 0x71, 0xea, 0x0d, 0x5f, 0x07, 0x61, 0xc6, 0x99, 0x3e, 0xf5, 0x45,
		0xed, 0xc7, 0x2d, 0xb8, 0x75, 0x00, 0x12, 0x64, 0x0f, 0xe3, 0xc2, 0xa8, 0x6f, 0x9b, 0x79, 0x18,
		0x59, 0x10, 0x5a, 0xee, 0x98, 0xc9, 0x1f, 0x49, 0x4b, 0x47, 0x6f, 0xbd, 0x31, 0x4b, 0x4c, 0xa1,
		0x87, 0x66, 0xf9, 0xbb, 0x0e, 0x8b, 0x48, 0xc3, 0x03, 0xa4, 0x7c, 0x19, 0xc8, 0xca, 0x22, 0x6a,
		0xe2, 0xc0, 0xf5, 0xfe, 0x24, 0xed, 0x36, 0x78, 0xed, 0x5c, 0xf6, 0x97, 0x1b, 0xbc, 0x71, 0x39,
		0x20, 0x34, 0x36, 0x53, 0xe9, 0x46, 0x4c, 0xb7, 0x98, 0xf7, 0x8a, 0x9a, 0x70
	};
	*/
	
	this->Send(data);
	//this->Send(data2);
	
	std::cout << "Send data" << std::endl;
	//this->_LogTransaction("<--", response);
	
	//this->Disconnect();
}

/*
	Private functions
*/
void Browsing::Client::_LogTransaction(const std::string &direction, const std::string &response) const
{
	std::lock_guard<std::mutex> guard(g_mutex_io);
	
	std::cout << std::setfill(' ') << std::setw(21) << this->GetAddress() << " " << direction << " " << response << std::endl;
}
